#define EPSILON 0.00001f
#define COLOR_CLEAR float4(0, 0, 0, 0)

#pragma multi_compile_local __ DEBUG_NONE DEBUG_SHAPES DEBUG_CIRCLES DEBUG_DEPTH
#pragma kernel CSMain
#pragma kernel Merge

Texture2D<float4> Source;
Texture2D<float4> ShapeTexture;
Texture2D<float4> CircleTexture;
RWTexture2D<float4> OutlineTexture;
RWTexture2D<float4> Output;
RWStructuredBuffer<float> SmoothWeightsBuffer;

int LineThickness;
int2 ShapeTexSize;
int2 ShapeTexOffset;

uint SmoothPower;
int SmoothRadius;

int2 getTextureSize(Texture2D<float4> tex)
{
    int width, height;
    tex.GetDimensions(width, height);
    return int2(width, height);
}

bool getShapePixelColor(int2 xy, out float4 color)
{
    bool inBounds = all(xy >= 0 && xy < ShapeTexSize);
    if (inBounds && ShapeTexture[xy].a > 0)
    {
        color = ShapeTexture[xy];
        return true;
    }
    else
    {
        color = COLOR_CLEAR;
        return false;
    }
}

void getShapeRect4Color(int x, int y, int2 center, inout float4 destColor)
{
    float4 color = COLOR_CLEAR;
    
    for (int i = -1; i <= 1; i += 2)
    {
        for (int j = -1; j <= 1; j += 2)
        {
            int2 xy = center + int2(i * x, j * y);
            
            if (getShapePixelColor(xy, color) && color.w > destColor.w)
            {
                destColor = color;
            }
        }
    }
}

void getShapeRect8Color(int x, int y, int2 center, inout float4 color)
{
    getShapeRect4Color(x, y, center, color);
    getShapeRect4Color(y, x, center, color);
}

void getMidpointCircleIsecColor(int2 c, int r, inout float4 color)
{
    int x = r;
    int y = 0;
    int d = 1 - r;
    
    if (r <= 1)
    {
        getShapeRect8Color(x, y, c, color);
    }
    else
    {
        while (x >= y)
        {
            getShapeRect8Color(x, y, c, color);
            y++;

            if (d < 0)
            {
                d += (y << 1) + 3;
            }
            else
            {
                d += ((y - x) << 1) + 5;
                x--;
            }
        }
    }
}

void getHornCircleIsecColor(int2 c, int r, inout float4 color)
{
    int d = -r;
    int x = r;
    int y = 0;
    bool result = false;
    
    if (r <= 1)
    {
        getShapeRect8Color(x, y, c, color);
    }
    else
    {
        while (y <= x)
        {
            getShapeRect8Color(x, y, c, color);
            d += (y << 1) + 1;
            y++;
        
            if (d > 0)
            {
                d += -(x << 1) + 2;
                x--;
            }
        }
    }
}

bool equalRGB(float4 color1, float4 color2)
{
    return all(abs(color1.rgb - color2.rgb) < EPSILON);
}

bool notEqualRGB(float4 color1, float4 color2)
{
    return any(abs(color1.rgb - color2.rgb) > EPSILON);
}

float4 getMergeColor(int2 xy)
{
    float4 outlineColor = COLOR_CLEAR;
    int2 sourceSize = getTextureSize(Source);

    int2 beg = max(0, xy - SmoothRadius);
    int2 end = min(sourceSize - 1, xy + SmoothRadius);
        
    int2 smoothOffset = xy - SmoothRadius;
    int smoothLength = (SmoothRadius << 1) + 1;
        
    float smoothWeightsTotal = 0;
    float outlineWeightsTotal = 0;
        
    for (int y = beg.y; y <= end.y; y++)
    {
        int smoothYOffset = (y - smoothOffset.y) * smoothLength;
            
        for (int x = beg.x; x <= end.x; x++)
        {
            int smoothX = x - smoothOffset.x;
            float smoothWeight = SmoothWeightsBuffer[smoothX + smoothYOffset];
            smoothWeightsTotal += smoothWeight;
                
            int2 ngbrXY = int2(x, y);
            int2 ngbrShapeXY = ShapeTexOffset + ngbrXY;
            float4 ngbrOutlineColor = OutlineTexture[ngbrXY];
            float4 ngbrShapeColor = ShapeTexture[ngbrShapeXY];
                
            if (ngbrOutlineColor.a > EPSILON)
            {
                outlineColor += ngbrOutlineColor * smoothWeight;
                outlineWeightsTotal += smoothWeight;
            }
            else if (ngbrShapeColor.a > EPSILON)
            {
                outlineColor += ngbrShapeColor * smoothWeight;
                outlineWeightsTotal += smoothWeight;
            }
        }
    }
    if (outlineWeightsTotal > 0)
    {
        outlineColor /= outlineWeightsTotal;
        return lerp(Source[xy], outlineColor, pow(abs(outlineWeightsTotal / smoothWeightsTotal), SmoothPower));
    }
    else
    {
        return Source[xy];
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint2 id : SV_DispatchThreadID)
{
    int2 xy = id;
    int2 shapeXY = ShapeTexOffset + xy;
    float4 shapeColor = ShapeTexture[shapeXY];
    float4 circleColor = CircleTexture[shapeXY];

    float4 color = COLOR_CLEAR;
    int r = LineThickness;
    
    if (shapeColor.a < EPSILON)
    {
        color = circleColor;
        //getMidpointCircleIsecColor(shapeXY, r, color);
        getHornCircleIsecColor(shapeXY, r, color);
    }
    OutlineTexture[xy] = color;
}

[numthreads(8, 8, 1)]
void Merge(uint2 id : SV_DispatchThreadID)
{
    int2 xy = id;
    int2 shapeXY = ShapeTexOffset + xy;
    float4 shapeColor = ShapeTexture[shapeXY];
    float4 circleColor = CircleTexture[shapeXY];
    
#ifdef DEBUG_SHAPES
    Output[xy] = shapeColor.a > 0 ? shapeColor : Source[xy];
#elif defined DEBUG_DEPTH
    Output[xy] = shapeColor.a > 0 ? shapeColor.a : float4(0, 1, 0, 1);
#elif defined DEBUG_CIRCLES
    Output[xy] = circleColor.a > 0 ? circleColor : Source[xy];
#else
    Output[xy] = shapeColor.a < EPSILON ? getMergeColor(xy) : Source[xy];
#endif
}
